""" Provide tasks for build and deployment.

This file provides tasks for paver.
"""
import sys
from os import environ

from paver.easy import sh, task, needs, options, Bunch
from paver.setuputils import setup

sys.path.insert(0, './picdb')
import version

environ[version.VERSION_KEY] = '2.0.0'
environ[version.RELEASE_KEY] = 'SNAPSHOT'

setup(
    name='picdb',
    version=version.get_version(),
    packages=['picdb'],
    url='https://github.com/stbraun/picdb',
    license='MIT',
    author='Stefan Braun',
    author_email='sb@action.ms',
    description='Simple image database.',
    include_package_data=True,
    zip_safe=False,
    install_requires=['pillow', 'PyYAML', 'py-postgresql'],
    requires=['pillow', 'PyYAML', 'PyInstaller', 'Sphinx', 'py-postgresql',
              'Paver'],
    provides=['picdb'],
    scripts=['scripts/assign_pictures.py', 'start_picdb.py'],
    tests_require=['pytest', 'pytest-cover', 'hypothesis'],
)

options(
    sphinx=Bunch(
        builddir="build",
        sourcedir="source",
    )
)


@task
def clean():
    """Remove build artifacts."""
    sh('rm -rf build dist picdb.egg-info')


@task
def dependencies():
    """Create a dependency graph.

    Find results in folder reports.
    """
    sh(
        'sfood picdb | tee reports/dependencies.txt | sfood-graph | tee '
        'reports/picdb.gv | dot -Tpdf -o reports/picdb.pdf')


@task
def test_coverage():
    """Run tests with coverage."""
    sh(
        "pytest --junit-xml=reports/unittest.xml --doctest-modules "
        "--cov=picdb/ --cov-branch --cov-report=xml:reports/coverage.xml "
        "--cov-report=html:reports/coverage test")


@task
def analyze():
    """Analyze project using flake8."""
    sh("rm -f reports/flake8.txt")
    sh(
        "flake8 --output-file reports/flake8.txt --benchmark --count "
        "--statistics picdb start_picdb.py")


@task
@needs('generate_setup', 'minilib', 'setuptools.command.sdist')
def sdist():
    """Overrides sdist to make sure that our setup.py is generated."""
    pass


@task
# @needs('doc_clean', 'html')
def docs():
    """Rebuild documentation."""
    pass


@task
def regenerate_spec():
    """Create a new spec for PyInstaller.

    Be aware that you need to modify the created spec to get a working
    configuration.
    """
    sh("PyInstaller --onefile --windowed -n PicDB  start_picdb.py")


@task
def build_app():
    """Build the app bundle based on an existing spec."""
    sh("echo "'building the application bundle ...'"")
    sh("PyInstaller PicDB.spec")


@task
def clean_app():
    """Remove files generated by PyInstaller."""
    sh("rm -rf dist/PicDB dist/PicDB.app")


@task
@needs('clean', 'test_coverage', 'analyze', 'sdist', 'build_app', 'docs')
def build():
    """Perform a complete build."""
    pass


@task
def deploy():
    """Deploy the app bundle on the local machine."""
    sh("cp -Rf dist/PicDB.app /Applications")
